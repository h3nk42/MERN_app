{"ast":null,"code":"var _jsxFileName = \"/home/neekh/fullstack_app/client/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nfunction App(props) {\n  const [data, setData] = useState([]);\n  const [id, setId] = useState(0);\n  const [message, setMessage] = useState(null);\n  const [intervalIsSet, setIntervalIsSet] = useState(false);\n  const [idToDelete, setIdToDelete] = useState(null);\n  const [idToUpdate, setIdToUpdate] = useState(null);\n  const [objectToUpdate, setObjectToUpdate] = useState(null);\n  const [updateToApply, setUpdateToApply] = useState(null); // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has\n  // changed and implement those changes into our UI\n\n  useEffect(() => {\n    getDataFromDb();\n\n    if (!intervalIsSet) {\n      let interval = setInterval(getDataFromDb, 1000);\n      setIntervalIsSet(interval);\n    } // never let a process live forever\n    // always kill a process everytime we are done using it\n\n\n    return function cleanUp() {\n      if (intervalIsSet) {\n        clearInterval(intervalIsSet);\n        setIntervalIsSet(null);\n      }\n    };\n  }, [intervalIsSet]); // just a note, here, in the front end, we use the id key of our data object\n  // in order to identify which we want to Update or delete.\n  // for our back end, we use the object id assigned by MongoDB to modify\n  // data base entries\n  // our first get method that uses our backend api to\n  // fetch data from our data base\n\n  const getDataFromDb = () => {\n    fetch('http://localhost:3002/api/getData').then(data => data.json()).then(res => setData(res.data));\n  }; // our put method that uses our backend api\n  // to create new query into our data base\n\n\n  const putDataToDB = message => {\n    let currentIds = data.map(data => data.id);\n    let idToBeAdded = 0;\n\n    while (currentIds.includes(idToBeAdded)) {\n      ++idToBeAdded;\n    }\n\n    axios.post('http://localhost:3001/api/putData', {\n      id: idToBeAdded,\n      message: message\n    });\n  }; // our delete method that uses our backend api\n  // to remove existing database information\n\n\n  const deleteFromDB = idTodelete => {\n    parseInt(idTodelete);\n    let objIdToDelete = null;\n    data.forEach(dat => {\n      if (dat.id == idTodelete) {\n        objIdToDelete = dat._id;\n      }\n    });\n    axios.delete('http://localhost:3001/api/deleteData', {\n      data: {\n        id: objIdToDelete\n      }\n    });\n  }; // our update method that uses our backend api\n  // to overwrite existing data base information\n\n\n  const updateDB = (idToUpdate, updateToApply) => {\n    let objIdToUpdate = null;\n    parseInt(idToUpdate);\n    data.forEach(dat => {\n      if (dat.id == idToUpdate) {\n        objIdToUpdate = dat._id;\n      }\n    });\n    axios.post('http://localhost:3001/api/updateData', {\n      id: objIdToUpdate,\n      update: {\n        message: updateToApply\n      }\n    });\n  }; // here is our UI\n  // it is easy to understand their functions when you\n  // see them render into our screen\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 17\n    }\n  }, data.length <= 0 ? 'NO DB ENTRIES YET' : data.map(dat => /*#__PURE__*/React.createElement(\"li\", {\n    style: {\n      padding: '10px'\n    },\n    key: data.message,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      color: 'gray'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 33\n    }\n  }, \" id: \"), \" \", dat.id, \" \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 87\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      color: 'gray'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 33\n    }\n  }, \" data: \"), dat.message))), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      padding: '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    onChange: e => setMessage(e.target.value),\n    placeholder: \"add something in the database\",\n    style: {\n      width: '200px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => putDataToDB(message),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 21\n    }\n  }, \"ADD\")), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      padding: '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    style: {\n      width: '200px'\n    },\n    onChange: e => setIdToDelete(e.target.value),\n    placeholder: \"put id of item to delete here\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => deleteFromDB(idToDelete),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 21\n    }\n  }, \"DELETE\")), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      padding: '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    style: {\n      width: '200px'\n    },\n    onChange: e => setIdToUpdate(e.target.value),\n    placeholder: \"id of item to update here\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    style: {\n      width: '200px'\n    },\n    onChange: e => setUpdateToApply(e.target.value),\n    placeholder: \"put new value of the item here\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => updateDB(idToUpdate, updateToApply),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 21\n    }\n  }, \"UPDATE\")));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/neekh/fullstack_app/client/src/App.js"],"names":["React","useState","useEffect","axios","App","props","data","setData","id","setId","message","setMessage","intervalIsSet","setIntervalIsSet","idToDelete","setIdToDelete","idToUpdate","setIdToUpdate","objectToUpdate","setObjectToUpdate","updateToApply","setUpdateToApply","getDataFromDb","interval","setInterval","cleanUp","clearInterval","fetch","then","json","res","putDataToDB","currentIds","map","idToBeAdded","includes","post","deleteFromDB","idTodelete","parseInt","objIdToDelete","forEach","dat","_id","delete","updateDB","objIdToUpdate","update","length","padding","color","e","target","value","width"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\n\n\nimport axios from 'axios';\n\nfunction App(props) {\n\n    const [data, setData] = useState([])\n    const [id, setId] = useState(0)\n    const [message, setMessage] = useState(null)\n    const [intervalIsSet, setIntervalIsSet] = useState(false)\n    const [idToDelete, setIdToDelete] = useState(null)\n    const [idToUpdate, setIdToUpdate] = useState(null)\n    const [objectToUpdate, setObjectToUpdate] = useState(null)\n    const [updateToApply, setUpdateToApply] = useState(null )\n\n    // when component mounts, first thing it does is fetch all existing data in our db\n    // then we incorporate a polling logic so that we can easily see if our db has\n    // changed and implement those changes into our UI\n   useEffect(() => {\n       getDataFromDb();\n       if (!intervalIsSet) {\n           let interval = setInterval(getDataFromDb, 1000);\n           setIntervalIsSet(interval);\n       }\n       // never let a process live forever\n       // always kill a process everytime we are done using it\n       return function cleanUp() {\n           if (intervalIsSet) {\n               clearInterval(intervalIsSet);\n              setIntervalIsSet(null);\n           }\n       }\n        }, [intervalIsSet])\n\n\n\n\n    // just a note, here, in the front end, we use the id key of our data object\n    // in order to identify which we want to Update or delete.\n    // for our back end, we use the object id assigned by MongoDB to modify\n    // data base entries\n\n    // our first get method that uses our backend api to\n    // fetch data from our data base\n    const getDataFromDb = () => {\n        fetch('http://localhost:3002/api/getData')\n            .then((data) => data.json())\n            .then((res) => setData(res.data));\n    };\n\n    // our put method that uses our backend api\n    // to create new query into our data base\n    const putDataToDB = (message) => {\n        let currentIds = data.map((data) => data.id);\n        let idToBeAdded = 0;\n        while (currentIds.includes(idToBeAdded)) {\n            ++idToBeAdded;\n        }\n\n        axios.post('http://localhost:3001/api/putData', {\n            id: idToBeAdded,\n            message: message,\n        });\n    };\n\n    // our delete method that uses our backend api\n    // to remove existing database information\n    const deleteFromDB = (idTodelete) => {\n        parseInt(idTodelete);\n        let objIdToDelete = null;\n        data.forEach((dat) => {\n            if (dat.id == idTodelete) {\n                objIdToDelete = dat._id;\n            }\n        });\n\n        axios.delete('http://localhost:3001/api/deleteData', {\n            data: {\n                id: objIdToDelete,\n            },\n        });\n    };\n\n    // our update method that uses our backend api\n    // to overwrite existing data base information\n    const updateDB = (idToUpdate, updateToApply) => {\n        let objIdToUpdate = null;\n        parseInt(idToUpdate);\n        data.forEach((dat) => {\n            if (dat.id == idToUpdate) {\n                objIdToUpdate = dat._id;\n            }\n        });\n\n        axios.post('http://localhost:3001/api/updateData', {\n            id: objIdToUpdate,\n            update: { message: updateToApply },\n        });\n    };\n\n    // here is our UI\n    // it is easy to understand their functions when you\n    // see them render into our screen\n\n\n        return (\n            <div>\n                <ul>\n                    {data.length <= 0\n                        ? 'NO DB ENTRIES YET'\n                        : data.map((dat) => (\n                            <li style={{ padding: '10px' }} key={data.message}>\n                                <span style={{ color: 'gray' }}> id: </span> {dat.id} <br />\n                                <span style={{ color: 'gray' }}> data: </span>\n                                {dat.message}\n                            </li>\n                        ))}\n                </ul>\n                <div style={{ padding: '10px' }}>\n                    <input\n                        type=\"text\"\n                        onChange={(e) => setMessage(e.target.value )}\n                        placeholder=\"add something in the database\"\n                        style={{ width: '200px' }}\n                    />\n                    <button onClick={() => putDataToDB(message)}>\n                        ADD\n                    </button>\n                </div>\n                <div style={{ padding: '10px' }}>\n                    <input\n                        type=\"text\"\n                        style={{ width: '200px' }}\n                        onChange={(e) => setIdToDelete(e.target.value )}\n                        placeholder=\"put id of item to delete here\"\n                    />\n                    <button onClick={() => deleteFromDB(idToDelete)}>\n                        DELETE\n                    </button>\n                </div>\n                <div style={{ padding: '10px' }}>\n                    <input\n                        type=\"text\"\n                        style={{ width: '200px' }}\n                        onChange={(e) => setIdToUpdate(e.target.value )}\n                        placeholder=\"id of item to update here\"\n                    />\n                    <input\n                        type=\"text\"\n                        style={{ width: '200px' }}\n                        onChange={(e) => setUpdateToApply(e.target.value)}\n                        placeholder=\"put new value of the item here\"\n                    />\n                    <button\n                        onClick={() =>\n                            updateDB(idToUpdate, updateToApply)\n                        }\n                    >\n                        UPDATE\n                    </button>\n                </div>\n            </div>\n        );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}