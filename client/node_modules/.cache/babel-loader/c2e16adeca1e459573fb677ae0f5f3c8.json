{"ast":null,"code":"var _jsxFileName = \"/home/neekh/fullstack_app/client/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nfunction App(props) {\n  const [data, setData] = useState([]);\n  const [id, setId] = useState(0);\n  const [message, setMessage] = useState(null);\n  const [intervalIsSet, setIntervalIsSet] = useState(false);\n  const [idToDelete, setIdToDelete] = useState(null);\n  const [idToUpdate, setIdToUpdate] = useState(null);\n  const [objectToUpdate, setObjectToUpdate] = useState(null); // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has\n  // changed and implement those changes into our UI\n\n  useEffect(() => {\n    getDataFromDb();\n\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 1000);\n      setState({\n        intervalIsSet: interval\n      });\n    } // never let a process live forever\n    // always kill a process everytime we are done using it\n\n\n    return () => {\n      if (state.intervalIsSet) {\n        clearInterval(this.state.intervalIsSet);\n        setState({\n          intervalIsSet: null\n        });\n      }\n    };\n  }); // just a note, here, in the front end, we use the id key of our data object\n  // in order to identify which we want to Update or delete.\n  // for our back end, we use the object id assigned by MongoDB to modify\n  // data base entries\n  // our first get method that uses our backend api to\n  // fetch data from our data base\n\n  const getDataFromDb = () => {\n    fetch('http://localhost:3001/api/getData').then(data => data.json()).then(res => this.setState({\n      data: res.data\n    }));\n  }; // our put method that uses our backend api\n  // to create new query into our data base\n\n\n  const putDataToDB = message => {\n    let currentIds = this.state.data.map(data => data.id);\n    let idToBeAdded = 0;\n\n    while (currentIds.includes(idToBeAdded)) {\n      ++idToBeAdded;\n    }\n\n    axios.post('http://localhost:3001/api/putData', {\n      id: idToBeAdded,\n      message: message\n    });\n  }; // our delete method that uses our backend api\n  // to remove existing database information\n\n\n  const deleteFromDB = idTodelete => {\n    parseInt(idTodelete);\n    let objIdToDelete = null;\n    this.state.data.forEach(dat => {\n      if (dat.id == idTodelete) {\n        objIdToDelete = dat._id;\n      }\n    });\n    axios.delete('http://localhost:3001/api/deleteData', {\n      data: {\n        id: objIdToDelete\n      }\n    });\n  }; // our update method that uses our backend api\n  // to overwrite existing data base information\n\n\n  const updateDB = (idToUpdate, updateToApply) => {\n    let objIdToUpdate = null;\n    parseInt(idToUpdate);\n    this.state.data.forEach(dat => {\n      if (dat.id == idToUpdate) {\n        objIdToUpdate = dat._id;\n      }\n    });\n    axios.post('http://localhost:3001/api/updateData', {\n      id: objIdToUpdate,\n      update: {\n        message: updateToApply\n      }\n    });\n  }; // here is our UI\n  // it is easy to understand their functions when you\n  // see them render into our screen\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 17\n    }\n  }, data.length <= 0 ? 'NO DB ENTRIES YET' : data.map(dat => /*#__PURE__*/React.createElement(\"li\", {\n    style: {\n      padding: '10px'\n    },\n    key: data.message,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      color: 'gray'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 33\n    }\n  }, \" id: \"), \" \", dat.id, \" \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 87\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      color: 'gray'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 33\n    }\n  }, \" data: \"), dat.message))), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      padding: '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    onChange: e => this.setState({\n      message: e.target.value\n    }),\n    placeholder: \"add something in the database\",\n    style: {\n      width: '200px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => this.putDataToDB(this.state.message),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 21\n    }\n  }, \"ADD\")), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      padding: '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    style: {\n      width: '200px'\n    },\n    onChange: e => this.setState({\n      idToDelete: e.target.value\n    }),\n    placeholder: \"put id of item to delete here\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => this.deleteFromDB(this.state.idToDelete),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 21\n    }\n  }, \"DELETE\")), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      padding: '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    style: {\n      width: '200px'\n    },\n    onChange: e => this.setState({\n      idToUpdate: e.target.value\n    }),\n    placeholder: \"id of item to update here\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    style: {\n      width: '200px'\n    },\n    onChange: e => this.setState({\n      updateToApply: e.target.value\n    }),\n    placeholder: \"put new value of the item here\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => this.updateDB(this.state.idToUpdate, this.state.updateToApply),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 21\n    }\n  }, \"UPDATE\")));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/neekh/fullstack_app/client/src/App.js"],"names":["React","useState","useEffect","axios","App","props","data","setData","id","setId","message","setMessage","intervalIsSet","setIntervalIsSet","idToDelete","setIdToDelete","idToUpdate","setIdToUpdate","objectToUpdate","setObjectToUpdate","getDataFromDb","state","interval","setInterval","setState","clearInterval","fetch","then","json","res","putDataToDB","currentIds","map","idToBeAdded","includes","post","deleteFromDB","idTodelete","parseInt","objIdToDelete","forEach","dat","_id","delete","updateDB","updateToApply","objIdToUpdate","update","length","padding","color","e","target","value","width"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\n\n\nimport axios from 'axios';\n\nfunction App(props) {\n\n    const [data, setData] = useState([])\n    const [id, setId] = useState(0)\n    const [message, setMessage] = useState(null)\n    const [intervalIsSet, setIntervalIsSet] = useState(false)\n    const [idToDelete, setIdToDelete] = useState(null)\n    const [idToUpdate, setIdToUpdate] = useState(null)\n    const [objectToUpdate, setObjectToUpdate] = useState(null)\n\n    // when component mounts, first thing it does is fetch all existing data in our db\n    // then we incorporate a polling logic so that we can easily see if our db has\n    // changed and implement those changes into our UI\n   useEffect(() => {\n       getDataFromDb();\n       if (!this.state.intervalIsSet) {\n           let interval = setInterval(this.getDataFromDb, 1000);\n           setState({ intervalIsSet: interval });\n       }\n       // never let a process live forever\n       // always kill a process everytime we are done using it\n       return () => {\n           if (state.intervalIsSet) {\n               clearInterval(this.state.intervalIsSet);\n               setState({ intervalIsSet: null });\n           }\n       }\n        })\n\n\n\n\n    // just a note, here, in the front end, we use the id key of our data object\n    // in order to identify which we want to Update or delete.\n    // for our back end, we use the object id assigned by MongoDB to modify\n    // data base entries\n\n    // our first get method that uses our backend api to\n    // fetch data from our data base\n    const getDataFromDb = () => {\n        fetch('http://localhost:3001/api/getData')\n            .then((data) => data.json())\n            .then((res) => this.setState({ data: res.data }));\n    };\n\n    // our put method that uses our backend api\n    // to create new query into our data base\n    const putDataToDB = (message) => {\n        let currentIds = this.state.data.map((data) => data.id);\n        let idToBeAdded = 0;\n        while (currentIds.includes(idToBeAdded)) {\n            ++idToBeAdded;\n        }\n\n        axios.post('http://localhost:3001/api/putData', {\n            id: idToBeAdded,\n            message: message,\n        });\n    };\n\n    // our delete method that uses our backend api\n    // to remove existing database information\n    const deleteFromDB = (idTodelete) => {\n        parseInt(idTodelete);\n        let objIdToDelete = null;\n        this.state.data.forEach((dat) => {\n            if (dat.id == idTodelete) {\n                objIdToDelete = dat._id;\n            }\n        });\n\n        axios.delete('http://localhost:3001/api/deleteData', {\n            data: {\n                id: objIdToDelete,\n            },\n        });\n    };\n\n    // our update method that uses our backend api\n    // to overwrite existing data base information\n    const updateDB = (idToUpdate, updateToApply) => {\n        let objIdToUpdate = null;\n        parseInt(idToUpdate);\n        this.state.data.forEach((dat) => {\n            if (dat.id == idToUpdate) {\n                objIdToUpdate = dat._id;\n            }\n        });\n\n        axios.post('http://localhost:3001/api/updateData', {\n            id: objIdToUpdate,\n            update: { message: updateToApply },\n        });\n    };\n\n    // here is our UI\n    // it is easy to understand their functions when you\n    // see them render into our screen\n\n\n        return (\n            <div>\n                <ul>\n                    {data.length <= 0\n                        ? 'NO DB ENTRIES YET'\n                        : data.map((dat) => (\n                            <li style={{ padding: '10px' }} key={data.message}>\n                                <span style={{ color: 'gray' }}> id: </span> {dat.id} <br />\n                                <span style={{ color: 'gray' }}> data: </span>\n                                {dat.message}\n                            </li>\n                        ))}\n                </ul>\n                <div style={{ padding: '10px' }}>\n                    <input\n                        type=\"text\"\n                        onChange={(e) => this.setState({ message: e.target.value })}\n                        placeholder=\"add something in the database\"\n                        style={{ width: '200px' }}\n                    />\n                    <button onClick={() => this.putDataToDB(this.state.message)}>\n                        ADD\n                    </button>\n                </div>\n                <div style={{ padding: '10px' }}>\n                    <input\n                        type=\"text\"\n                        style={{ width: '200px' }}\n                        onChange={(e) => this.setState({ idToDelete: e.target.value })}\n                        placeholder=\"put id of item to delete here\"\n                    />\n                    <button onClick={() => this.deleteFromDB(this.state.idToDelete)}>\n                        DELETE\n                    </button>\n                </div>\n                <div style={{ padding: '10px' }}>\n                    <input\n                        type=\"text\"\n                        style={{ width: '200px' }}\n                        onChange={(e) => this.setState({ idToUpdate: e.target.value })}\n                        placeholder=\"id of item to update here\"\n                    />\n                    <input\n                        type=\"text\"\n                        style={{ width: '200px' }}\n                        onChange={(e) => this.setState({ updateToApply: e.target.value })}\n                        placeholder=\"put new value of the item here\"\n                    />\n                    <button\n                        onClick={() =>\n                            this.updateDB(this.state.idToUpdate, this.state.updateToApply)\n                        }\n                    >\n                        UPDATE\n                    </button>\n                </div>\n            </div>\n        );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}