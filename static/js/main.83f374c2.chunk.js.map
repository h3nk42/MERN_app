{"version":3,"sources":["img/PlantSvg.js","components/DB/DbExchange.js","components/DB/RenderItems.js","components/DB/RenderActions.js","components/Items.js","components/HeaderElement.js","img/Plus.js","img/Fragezeichen.js","components/MyHeader.js","App.js","serviceWorker.js","index.js"],"names":["PlantSvg","color","width","height","fill","viewBox","d","DbExchange","Meta","Card","RenderItems","props","listItems","items","slice","map","data","key","id","style","margin","cover","alt","src","actions","DeleteOutlined","onClick","deleteItem","title","message","description","display","flexDirection","alignContent","flexWrap","padding","backgroundColor","RenderActions","useState","buttonWait","setButtonWait","alignItems","justifyContent","minWidth","onChange","e","setMessage","target","value","placeholder","disabled","handleClick","setTimeout","Items","setItems","intervalIsSet","setIntervalIsSet","highestId","setHighestId","useEffect","getDataFromDb","interval","setInterval","clearInterval","fetch","then","json","res","Object","values","length","className","idTodelete","parseInt","objIdToDelete","forEach","dat","_id","axios","method","url","type","idToBeAdded","post","HeaderElement","hover","setHover","toggleHover","onMouseEnter","onMouseLeave","val","cursor","marginLeft","marginRight","colorScheme","second","main","Plus","Fragezeichen","MyHeader","renderHeaderElements","Footer","Layout","Header","Content","App","third","fourth","fifth","minHeight","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.83f374c2.chunk.js","sourcesContent":["import React from 'react';\n\nimport Icon from '@ant-design/icons';\n\nconst PlantSvg = () =>\n\t\t<svg color='darkgrey' width=\"60px\" height=\"60px\" fill=\"currentColor\" viewBox=\"0 0 547 547\">\n<path d='M440.669,197.002H285.22c-6.983-25.945-12.627-39.627-18.629-46.783c2.561-5.239,5.617-10.09,9.342-13.901\n\t\tc4.029-4.153,15.842-3.188,22.255-1.743c0,0,3.07,3.441,4.864,5.078c26.24,23.88,60.499,16.351,78.179,10.856\n\t\tC473.831,121.766,433.466,0,433.466,0c-16.421,26.625-115.59,31.833-134.846,68.244c-9.254,17.527-11.803,31.708-10.425,43.185\n\t\tc6.358-0.695,80.018-9.644,118.142-54.862c0,0-44.565,69.442-114.628,67.716c-13.894-0.348-22.333-0.619-31.633,20.553\n\t\tc-5.016-2.556-10.607-2.406-17.579-2.23c-70.065,1.727-114.623-67.716-114.623-67.716c38.105,45.218,111.772,54.167,118.129,54.862\n\t\tc1.384-11.467-1.165-25.658-10.431-43.185C216.32,50.151,117.15,44.955,100.729,18.323c0,0-40.351,121.765,52.234,150.513\n\t\tc17.68,5.488,51.947,13.02,78.183-10.862c1.792-1.636,4.856-5.069,4.856-5.069c6.43-1.445,18.226-2.411,22.264,1.737\n\t\tc10.421,10.714,15.938,29.529,18.638,42.361H105.867c-13.589,0-24.61,11.015-24.61,24.611v27.086\n\t\tc0,13.598,11.021,24.613,24.61,24.613h7.445l19.636,248.619c0,13.612,11.02,24.616,24.621,24.616h228.688\n\t\tc13.591,0,24.63-11.004,24.63-24.616l22.438-248.663l7.332,0.039c13.605,0,24.635-11.016,24.635-24.613v-27.086\n\t\tC465.272,208.018,454.239,197.002,440.669,197.002z' />\n\t\t</svg>\n\nexport default PlantSvg","import React, {useState, useEffect} from 'react';\n\n\nimport axios from 'axios';\n\nfunction DbExchange(props) {\n\n    const [data, setData] = useState([])\n    const [id, setId] = useState(0)\n    const [message, setMessage] = useState(null)\n    const [intervalIsSet, setIntervalIsSet] = useState(false)\n    const [idToDelete, setIdToDelete] = useState(null)\n    const [idToUpdate, setIdToUpdate] = useState(null)\n    const [objectToUpdate, setObjectToUpdate] = useState(null)\n    const [updateToApply, setUpdateToApply] = useState(null )\n\n    // when component mounts, first thing it does is fetch all existing data in our db\n    // then we incorporate a polling logic so that we can easily see if our db has\n    // changed and implement those changes into our UI\n    useEffect(() => {\n        getDataFromDb();\n        if (!intervalIsSet) {\n            let interval = setInterval(getDataFromDb, 1000);\n            setIntervalIsSet(interval);\n        }\n        // never let a process live forever\n        // always kill a process everytime we are done using it\n        return function cleanUp() {\n            if (intervalIsSet) {\n                clearInterval(intervalIsSet);\n                setIntervalIsSet(null);\n            }\n        }\n    }, [intervalIsSet])\n\n\n\n\n    // just a note, here, in the front end, we use the id key of our data object\n    // in order to identify which we want to Update or delete.\n    // for our back end, we use the object id assigned by MongoDB to modify\n    // data base entries\n\n    // our first get method that uses our backend api to\n    // fetch data from our data base\n    const getDataFromDb = () => {\n        fetch('http://localhost:3001/api/getData')\n            .then((data) => data.json())\n            .then((res) => setData(res.data));\n    };\n\n    // our put method that uses our backend api\n    // to create new query into our data base\n    const putDataToDB = (message) => {\n        let currentIds = data.map((data) => data.id);\n        let idToBeAdded = 0;\n        while (currentIds.includes(idToBeAdded)) {\n            ++idToBeAdded;\n        }\n\n        axios.post('http://localhost:3001/api/putData', {\n            id: idToBeAdded,\n            message: message,\n        });\n    };\n\n    // our delete method that uses our backend api\n    // to remove existing database information\n    const deleteFromDB = (idTodelete) => {\n        parseInt(idTodelete);\n        let objIdToDelete = null;\n        data.forEach((dat) => {\n            if (dat.id == idTodelete) {\n                objIdToDelete = dat._id;\n            }\n        });\n        console.log(idToDelete);\n\n        axios({\n            method: 'delete',\n            url: 'http://localhost:3001/api/deleteData',\n            data: {id: objIdToDelete}\n        });\n\n    };\n\n    // our update method that uses our backend api\n    // to overwrite existing data base information\n    const updateDB = (idToUpdate, updateToApply) => {\n        let objIdToUpdate = null;\n        parseInt(idToUpdate);\n        data.forEach((dat) => {\n            if (dat.id == idToUpdate) {\n                objIdToUpdate = dat._id;\n            }\n        });\n\n        axios.post('http://localhost:3001/api/updateData', {\n            id: objIdToUpdate,\n            update: { message: updateToApply },\n        });\n    };\n\n    // here is our UI\n    // it is easy to understand their functions when you\n    // see them render into our screen\n\n    return (\n        <div>\n            <ul>\n                {data.length <= 0\n                    ? 'NO DB ENTRIES YET'\n                    : data.map((dat) => (\n                        <li style={{ padding: '10px' }} key={data.message}>\n                            <span style={{ color: 'gray' }}> id: </span> {dat.id} <br />\n                            <span style={{ color: 'gray' }}> data: </span>\n                            {dat.message}\n                        </li>\n                    ))}\n            </ul>\n            <div style={{ padding: '10px' }}>\n                <input\n                    type=\"text\"\n                    onChange={(e) => setMessage(e.target.value )}\n                    placeholder=\"add something in the database\"\n                    style={{ width: '200px' }}\n                />\n                <button onClick={() => putDataToDB(message)}>\n                    ADD\n                </button>\n            </div>\n            <div style={{ padding: '10px' }}>\n                <input\n                    type=\"text\"\n                    style={{ width: '200px' }}\n                    onChange={(e) => setIdToDelete(e.target.value )}\n                    placeholder=\"put id of item to delete here\"\n                />\n                <button onClick={() => deleteFromDB(idToDelete)}>\n                    DELETE\n                </button>\n            </div>\n            <div style={{ padding: '10px' }}>\n                <input\n                    type=\"text\"\n                    style={{ width: '200px' }}\n                    onChange={(e) => setIdToUpdate(e.target.value )}\n                    placeholder=\"id of item to update here\"\n                />\n                <input\n                    type=\"text\"\n                    style={{ width: '200px' }}\n                    onChange={(e) => setUpdateToApply(e.target.value)}\n                    placeholder=\"put new value of the item here\"\n                />\n                <button\n                    onClick={() =>\n                        updateDB(idToUpdate, updateToApply)\n                    }\n                >\n                    UPDATE\n                </button>\n            </div>\n        </div>\n    );\n}\n\nexport default DbExchange;\n","import React, { useState } from 'react';\n\nimport {Row, Col, Button, Card, Avatar} from 'antd';\nimport { DeleteOutlined,  EditOutlined, EllipsisOutlined, SettingOutlined } from '@ant-design/icons';\nconst { Meta } = Card\n\n\nfunction RenderItems (props) {\n\n   /*\n        Render all the items > 8\n\n   const [slicedItems, setSlicedItems] = useState(null)\n\n    const sliceUpItems = () => {\n        let numToSlice = Math.ceil(props.items.length / 8)\n        for (let i = 0; i < numToSlice; i++) {\n            setSlicedItems(slicedItems.concat(props.items.slice(0, 8)))\n        }\n    }*/\n\n    let items1 = props.items.slice(0, 8)\n\n    const listItems = items1.map( (data) =>\n        <Card\n            key={data.id}\n            style={{ width: 200, margin: '0.5%' }}\n            cover={\n                <img\n                    alt=\"example\"\n                    src='https://i.ibb.co/hR0KZxL/Kisspng-swiss-cheese-plant-leaf-tropical-garden-plant-stem-5c7429221e11b9-0010663715511165781232.png'\n                />\n            }\n            actions={[\n\n                <DeleteOutlined onClick={() => {props.deleteItem(data.id)}} key=\"ellipsis\" />,\n            ]}\n        >\n            <Meta\n                title={data.message}\n                description= {data.id}\n            />\n        </Card>\n    )\n\n    return(\n        <div style={{display: 'flex', flexDirection: 'row', alignContent: 'flex-start', flexWrap: 'wrap', padding: '2%', width: '70%', height: '100%', backgroundColor: 'white'}}>\n                {listItems}\n        </div>\n\n    )\n}\n\n\nexport default RenderItems\n\n\n/*\nstyle={{ margin:'1%', padding: '1%', width: '14%', height: '20%', backgroundColor: 'black'}}\n <div key={data.id}>\n                <p style={{color: 'white'}}> Msg: {data.message} </p>\n                <p style={{color: 'white'}}> id: {data.id} </p>\n                <Button danger type=\"text\" onClick={() => {props.deleteItem(data.id)}}> delete </Button>\n            </div>\n*/\n","import React, { useState, useEffect } from 'react';\nimport { Button, Input } from \"antd\";\n\n\nfunction RenderActions (props) {\n\n   const [buttonWait, setButtonWait] = useState(false)\n\n\n    const returnButton = () => {\n        return(\n        !buttonWait ?\n            <Button onClick={() =>{\n\n                props.handleClick(props.message)\n                setButtonWait(true)\n                setTimeout(() => {\n                    setButtonWait(false)\n                }, 1000\n                )}\n            }> send </Button>\n        :\n            <Button disabled> send </Button>\n        )\n    }\n\n\n    return(\n        <div style={{padding: '1% 1%', display: 'flex', alignItems: 'flex-start', justifyContent: 'flex-start', alignContent:'flex-start', flexWrap: 'wrap', width: '30%', backgroundColor: 'white'}}>\n            <Input style={{minWidth: '100px', width: '50%'}} onChange={(e) => props.setMessage(e.target.value )} placeholder=\"your message\" />\n            {returnButton()}\n        </div>\n    )\n\n}\n\nexport default RenderActions","import React, {useEffect, useState} from \"react\";\nimport RenderItems from \"./DB/RenderItems\";\nimport RenderActions from \"./DB/RenderActions\";\nimport axios from \"axios\";\nimport '../styles/BoxShadows.css'\nimport { Divider } from 'antd'\n\nlet messages = [];\n\nfunction Items () {\n\n    const [items, setItems] = useState([] )\n    const [intervalIsSet, setIntervalIsSet] = useState(false)\n    const [message, setMessage] = useState(null)\n    const [highestId, setHighestId] = useState(0)\n\n    useEffect(() => {\n        getDataFromDb();\n        if (!intervalIsSet) {\n            let interval = setInterval(getDataFromDb, 1000);\n            setIntervalIsSet(interval);\n        }\n        // never let a process live forever\n        // always kill a process everytime we are done using it\n        return function cleanUp() {\n            if (intervalIsSet) {\n                clearInterval(intervalIsSet);\n                setIntervalIsSet(null);\n            }\n        }\n    }, [intervalIsSet])\n//http://localhost:5001/shareyourplant-b5c9a/us-central1/app/api\n\n    //http://localhost:3001/api/getData\n    const getDataFromDb = () => {\n        fetch('https://us-central1-shareyourplant-b5c9a.cloudfunctions.net/app/api')\n            .then((data) => data.json())\n            .then((res) => {\n                setItems(res.data)\n                setHighestId(Object.values(res.data).length)\n            });\n    };\n\n    const putDataToDB = (message) => {\n\n        let idToBeAdded = highestId + 1;\n\n\n        axios.post('https://us-central1-shareyourplant-b5c9a.cloudfunctions.net/app/api/putData', {\n            id: idToBeAdded,\n            message: message,\n        });\n    };\n\n\n    const deleteFromDB = (idTodelete) => {\n        parseInt(idTodelete);\n        let objIdToDelete = null;\n        items.forEach((dat) => {\n            if (dat.id == idTodelete) {\n                objIdToDelete = dat._id;\n            }\n        });\n\n        axios({\n            method: 'delete',\n            url: 'https://us-central1-shareyourplant-b5c9a.cloudfunctions.net/app/api/deleteData',\n            data: {id: objIdToDelete}\n        });\n\n    };\n\n\n    return (\n        <div className={'card-3'} style={{height: '100%', display: 'flex', flexDirection: 'row'}}>\n            <RenderItems items={items} setItems={setItems} deleteItem={deleteFromDB}/>\n            <div style={{width: '1px'}}>\n                <Divider type=\"vertical\" />\n            </div>\n            <RenderActions handleClick={putDataToDB} message={message} setMessage={setMessage} ></RenderActions>\n        </div>\n    )\n}\n\nexport default Items","import React, {useState} from 'react'\n\nconst HeaderElement = (props) => {\n    const [hover, setHover] = useState(false)\n\n\n    const getBackgroundColor = () => {\n        return hover ?\n            (props.colorScheme.second)\n            :\n            (props.colorScheme.main)\n    }\n\n    const toggleHover = () => {\n        setHover(!hover)\n    }\n\n    return(\n\n        <div onMouseEnter={ toggleHover} onMouseLeave={toggleHover} key={props.val} className=' flex flex-row justify-center items-center ' style={{cursor: 'pointer' , marginLeft: '10%', marginRight: '10%', height: '100%', width: '100px', backgroundColor: getBackgroundColor(), }}>\n            {props.val}\n        </div>\n\n    )\n\n}\n\nexport default HeaderElement","import React from 'react';\n\nimport Icon from '@ant-design/icons';\n\nconst Plus = () =>\n    <svg color='darkgrey' width=\"60px\" height=\"60px\" fill=\"currentColor\" viewBox=\"0 0 512 512\">\n        <path d='M492,236H276V20c0-11.046-8.954-20-20-20c-11.046,0-20,8.954-20,20v216H20c-11.046,0-20,8.954-20,20s8.954,20,20,20h216\n\t\t\tv216c0,11.046,8.954,20,20,20s20-8.954,20-20V276h216c11.046,0,20-8.954,20-20C512,244.954,503.046,236,492,236z' />\n    </svg>\n\nexport default Plus","import React from 'react';\n\nimport Icon from '@ant-design/icons';\n\nconst Fragezeichen = () =>\n    <svg color='darkgrey' width=\"60px\" height=\"60px\" fill=\"currentColor\" viewBox=\"0 0 39 39\">\n        <path  d=\"M17.881,29.927c-2.49,0-4.296,1.896-4.296,4.506c0,2.539,1.825,4.453,4.244,4.453\n\t\t\tc2.521,0,4.349-1.873,4.349-4.453C22.178,31.823,20.371,29.927,17.881,29.927z M17.829,36.466c-1.076,0-1.826-0.836-1.826-2.033\n\t\t\tc0-1.248,0.755-2.088,1.878-2.088c1.175,0,1.878,0.781,1.878,2.088C19.759,35.688,19.02,36.466,17.829,36.466z\"/>\n        <path  d=\"M18.667,0c-2.482,0-5.148,0.627-7.131,1.676c-1.057,0.559-1.539,1.902-1.1,3.059l0.492,1.292\n\t\t\tc0.433,1.139,1.857,1.659,2.979,1.075c1.096-0.573,2.52-0.915,3.799-0.915c2.508,0.04,3.78,1.146,3.78,3.289\n\t\t\tc0,2.019-1.238,3.87-3.381,6.395c-2.675,3.208-3.892,6.646-3.521,9.917l0.051,0.682c0.079,1.023,1.08,1.797,2.33,1.797h1.99\n\t\t\tc0.718,0,1.365-0.256,1.779-0.703c0.322-0.35,0.481-0.797,0.444-1.257l-0.05-0.628c-0.143-2.426,0.665-4.487,2.7-6.896\n\t\t\tc2.711-3.218,4.784-5.989,4.784-9.882C28.613,4.47,25.538,0,18.667,0z M21.981,17.222c-2.435,2.879-3.44,5.53-3.263,8.624h-1.707\n\t\t\tl-0.021-0.285c-0.298-2.635,0.727-5.449,2.962-8.133c2.502-2.943,3.95-5.188,3.95-7.952c0-3.461-2.362-5.648-6.167-5.708h-0.011\n\t\t\tc-1.568,0-3.296,0.395-4.658,1.086l-0.402-1.04c1.653-0.873,3.896-1.394,6.002-1.394c5.55,0,7.527,3.349,7.527,6.482\n\t\t\tC26.193,11.984,24.447,14.295,21.981,17.222z\"/>\n    </svg>\n\nexport default Fragezeichen\n","import React, {useState} from 'react'\nimport HeaderElement from \"./HeaderElement\";\nimport PlantSvg from \"../img/PlantSvg\";\nimport Plus from \"../img/Plus\";\nimport Fragezeichen from \"../img/Fragezeichen\";\n\nconst MyHeader = (props) => {\n\n    const headerElements = [{\n        data: <PlantSvg/>,\n        id: 1\n        }, {\n        data: <Plus/>,\n        id: 2\n    },\n        {data: <Fragezeichen/>,\n        id: 3\n        }]\n\n\n    const renderHeaderElements =\n        headerElements.map( (e) =>\n        <HeaderElement key={e.id} val = {e.data} {...props} />\n        )\n\n    return(\n        <div className='flex flex-row items-center justify-center' style={{height:'80px', backgroundColor: props.colorScheme.main}} >\n            {renderHeaderElements}\n        </div>\n    )\n\n}\n\nexport default MyHeader","import React, {useState, useEffect} from 'react';\n\nimport { Layout, Menu } from 'antd';\nimport Icon from '@ant-design/icons';\nimport 'antd/dist/antd.css';\nimport PlantSvg from \"./img/PlantSvg\";\n\n\nimport DbExchange from \"./components/DB/DbExchange\";\nimport RenderItems from \"./components/DB/RenderItems\";\nimport Items from \"./components/Items\";\nimport MyHeader from \"./components/MyHeader\";\n\nconst { Header, Footer, Content} = Layout\n\n\n\nfunction App() {\n\n    const colorScheme = {\n                        main: '#4E6E5D',\n                        second: '#4DA167',\n                        third: '#3BC14A',\n                        fourth: '#CFCFCF',\n                        fifth: '#4D5057'\n    }\n\n\n    return (\n        <div >\n            <Layout style={{minHeight: '100vh'}} >\n                <MyHeader colorScheme={colorScheme}/>\n                <Content style={{ height: '100%'}} >\n                    <div style={{ padding: '100px 100px', minHeight: '900px', backgroundColor: 'white' }}>\n                        <div style={{  height: '100%',width:'100%', backgroundColor: colorScheme.fourth }} >\n                            <Items/>\n                        </div>\n                    </div>\n                </Content>\n                <Footer style={{  textAlign: 'center'}} > <h3> Share your Plant   //   created by Henk van der Sloot   //   ©2020 </h3>  </Footer>\n            </Layout>\n        </div>\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}