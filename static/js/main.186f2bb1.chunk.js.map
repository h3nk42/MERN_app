{"version":3,"sources":["img/PlantSvg.js","components/plantComponents/DbExchange.js","img/Plus.js","components/plantComponents/AddPlantComponent/PlantSelect.js","components/plantComponents/AddPlantComponent/AddPlant.js","components/plantComponents/AddPlantComponent/PlantPlus.js","components/plantComponents/RenderItems.js","components/Items.js","components/HeaderElement.js","img/Fragezeichen.js","components/MyHeader.js","components/plantComponents/PlantViewComponent.js","components/RadioConnection.js","components/MyFooter.js","App.js","serviceWorker.js","index.js"],"names":["PlantSvg","props","color","colorScheme","main","width","height","fill","viewBox","d","DbExchange","Plus","Option","Select","PlantSelect","renderSpecies","name","id","map","data","key","value","showSearch","style","placeholder","optionFilterProp","onChange","setAge","onFocus","console","log","onBlur","onSearch","val","filterOption","input","option","children","toLowerCase","indexOf","AddPlant","className","icon","LeftOutlined","onClick","handlePlantState","minWidth","e","setMessage","target","message","age","CheckOutlined","handleClick","disabled","PlantPlus","useState","hover","setHover","wobble","setWobble","wobbleReverse","setWobbleReverse","addPlantState","setAddPlantState","handleNewPlantClickTime","setTimeout","handleNewPlantClick","toggleHover","border","borderRadius","backgroundColor","wobblereverse","onAnimationEnd","onMouseEnter","onMouseLeave","cursor","Meta","Card","RenderItems","imgLinks","listItems","items","_id","margin","boxShadow","cover","alt","src","actions","ProfileOutlined","handlePlantView","DeleteOutlined","deleteItem","title","description","flexWrap","padding","fifth","Items","setItems","intervalIsSet","setIntervalIsSet","useEffect","getDataFromDb","url","interval","setInterval","clearInterval","firstTime","fetch","then","json","res","setLoading","loading","LoadingOutlined","fontSize","display","flexDirection","axios","post","idTodelete","parseInt","objIdToDelete","forEach","dat","method","HeaderElement","marginLeft","marginRight","fourth","Fragezeichen","MyHeader","renderHeaderElements","PlantViewComponent","third","toggleLoading","RadioConnection","disable","setDisable","Group","defaultValue","size","Button","MyFooter","Content","Layout","Footer","App","urls","devMode","setDevMode","setUrl","plantView","setPlantView","second","minHeight","bool","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.186f2bb1.chunk.js","sourcesContent":["import React from 'react';\n\nimport Icon from '@ant-design/icons';\n\nconst PlantSvg = (props) =>\n\t\t<svg color={props.colorScheme.main} width=\"60px\" height=\"60px\" fill=\"currentColor\" viewBox=\"0 0 547 547\">\n<path d='M440.669,197.002H285.22c-6.983-25.945-12.627-39.627-18.629-46.783c2.561-5.239,5.617-10.09,9.342-13.901\n\t\tc4.029-4.153,15.842-3.188,22.255-1.743c0,0,3.07,3.441,4.864,5.078c26.24,23.88,60.499,16.351,78.179,10.856\n\t\tC473.831,121.766,433.466,0,433.466,0c-16.421,26.625-115.59,31.833-134.846,68.244c-9.254,17.527-11.803,31.708-10.425,43.185\n\t\tc6.358-0.695,80.018-9.644,118.142-54.862c0,0-44.565,69.442-114.628,67.716c-13.894-0.348-22.333-0.619-31.633,20.553\n\t\tc-5.016-2.556-10.607-2.406-17.579-2.23c-70.065,1.727-114.623-67.716-114.623-67.716c38.105,45.218,111.772,54.167,118.129,54.862\n\t\tc1.384-11.467-1.165-25.658-10.431-43.185C216.32,50.151,117.15,44.955,100.729,18.323c0,0-40.351,121.765,52.234,150.513\n\t\tc17.68,5.488,51.947,13.02,78.183-10.862c1.792-1.636,4.856-5.069,4.856-5.069c6.43-1.445,18.226-2.411,22.264,1.737\n\t\tc10.421,10.714,15.938,29.529,18.638,42.361H105.867c-13.589,0-24.61,11.015-24.61,24.611v27.086\n\t\tc0,13.598,11.021,24.613,24.61,24.613h7.445l19.636,248.619c0,13.612,11.02,24.616,24.621,24.616h228.688\n\t\tc13.591,0,24.63-11.004,24.63-24.616l22.438-248.663l7.332,0.039c13.605,0,24.635-11.016,24.635-24.613v-27.086\n\t\tC465.272,208.018,454.239,197.002,440.669,197.002z' />\n\t\t</svg>\n\nexport default PlantSvg","import React, {useState, useEffect} from 'react';\n\n\nimport axios from 'axios';\n\nfunction DbExchange(props) {\n\n    const [data, setData] = useState([])\n    const [id, setId] = useState(0)\n    const [message, setMessage] = useState(null)\n    const [intervalIsSet, setIntervalIsSet] = useState(false)\n    const [idToDelete, setIdToDelete] = useState(null)\n    const [idToUpdate, setIdToUpdate] = useState(null)\n    const [objectToUpdate, setObjectToUpdate] = useState(null)\n    const [updateToApply, setUpdateToApply] = useState(null )\n\n    // when component mounts, first thing it does is fetch all existing data in our db\n    // then we incorporate a polling logic so that we can easily see if our db has\n    // changed and implement those changes into our UI\n    useEffect(() => {\n        getDataFromDb();\n        if (!intervalIsSet) {\n            let interval = setInterval(getDataFromDb, 1000);\n            setIntervalIsSet(interval);\n        }\n        // never let a process live forever\n        // always kill a process everytime we are done using it\n        return function cleanUp() {\n            if (intervalIsSet) {\n                clearInterval(intervalIsSet);\n                setIntervalIsSet(null);\n            }\n        }\n    }, [intervalIsSet])\n\n\n\n\n    // just a note, here, in the front end, we use the id key of our data object\n    // in order to identify which we want to Update or delete.\n    // for our back end, we use the object id assigned by MongoDB to modify\n    // data base entries\n\n    // our first get method that uses our backend api to\n    // fetch data from our data base\n    const getDataFromDb = () => {\n        fetch('http://localhost:3001/api/getData')\n            .then((data) => data.json())\n            .then((res) => setData(res.data));\n    };\n\n    // our put method that uses our backend api\n    // to create new query into our data base\n    const putDataToDB = (message) => {\n        let currentIds = data.map((data) => data.id);\n        let idToBeAdded = 0;\n        while (currentIds.includes(idToBeAdded)) {\n            ++idToBeAdded;\n        }\n\n        axios.post('http://localhost:3001/api/putData', {\n            id: idToBeAdded,\n            message: message,\n        });\n    };\n\n    // our delete method that uses our backend api\n    // to remove existing database information\n    const deleteFromDB = (idTodelete) => {\n        parseInt(idTodelete);\n        let objIdToDelete = null;\n        data.forEach((dat) => {\n            if (dat.id == idTodelete) {\n                objIdToDelete = dat._id;\n            }\n        });\n        console.log(idToDelete);\n\n        axios({\n            method: 'delete',\n            url: 'http://localhost:3001/api/deleteData',\n            data: {id: objIdToDelete}\n        });\n\n    };\n\n    // our update method that uses our backend api\n    // to overwrite existing data base information\n    const updateDB = (idToUpdate, updateToApply) => {\n        let objIdToUpdate = null;\n        parseInt(idToUpdate);\n        data.forEach((dat) => {\n            if (dat.id == idToUpdate) {\n                objIdToUpdate = dat._id;\n            }\n        });\n\n        axios.post('http://localhost:3001/api/updateData', {\n            id: objIdToUpdate,\n            update: { message: updateToApply },\n        });\n    };\n\n    // here is our UI\n    // it is easy to understand their functions when you\n    // see them render into our screen\n\n    return (\n        <div>\n            <ul>\n                {data.length <= 0\n                    ? 'NO plantComponents ENTRIES YET'\n                    : data.map((dat) => (\n                        <li style={{ padding: '10px' }} key={data.message}>\n                            <span style={{ color: 'gray' }}> id: </span> {dat.id} <br />\n                            <span style={{ color: 'gray' }}> data: </span>\n                            {dat.message}\n                        </li>\n                    ))}\n            </ul>\n            <div style={{ padding: '10px' }}>\n                <input\n                    type=\"text\"\n                    onChange={(e) => setMessage(e.target.value )}\n                    placeholder=\"add something in the database\"\n                    style={{ width: '200px' }}\n                />\n                <button onClick={() => putDataToDB(message)}>\n                    ADD\n                </button>\n            </div>\n            <div style={{ padding: '10px' }}>\n                <input\n                    type=\"text\"\n                    style={{ width: '200px' }}\n                    onChange={(e) => setIdToDelete(e.target.value )}\n                    placeholder=\"put id of item to delete here\"\n                />\n                <button onClick={() => deleteFromDB(idToDelete)}>\n                    DELETE\n                </button>\n            </div>\n            <div style={{ padding: '10px' }}>\n                <input\n                    type=\"text\"\n                    style={{ width: '200px' }}\n                    onChange={(e) => setIdToUpdate(e.target.value )}\n                    placeholder=\"id of item to update here\"\n                />\n                <input\n                    type=\"text\"\n                    style={{ width: '200px' }}\n                    onChange={(e) => setUpdateToApply(e.target.value)}\n                    placeholder=\"put new value of the item here\"\n                />\n                <button\n                    onClick={() =>\n                        updateDB(idToUpdate, updateToApply)\n                    }\n                >\n                    UPDATE\n                </button>\n            </div>\n        </div>\n    );\n}\n\nexport default DbExchange;\n","import React from 'react';\n\nimport Icon from '@ant-design/icons';\n\nconst Plus = (props) =>\n    <svg color={props.colorScheme.main} width=\"60px\" height=\"60px\" fill=\"currentColor\" viewBox=\"0 0 512 512\">\n        <path d='M492,236H276V20c0-11.046-8.954-20-20-20c-11.046,0-20,8.954-20,20v216H20c-11.046,0-20,8.954-20,20s8.954,20,20,20h216\n\t\t\tv216c0,11.046,8.954,20,20,20s20-8.954,20-20V276h216c11.046,0,20-8.954,20-20C512,244.954,503.046,236,492,236z' />\n    </svg>\n\nexport default Plus","import {Select} from 'antd';\nimport React from 'react'\n\nconst { Option } = Select;\n\nconst PlantSelect = (props) =>{\n\n    function onChange(value) {\n        props.setAge(value)\n    }\n\n    function onBlur() {\n        console.log('blur');\n    }\n\n    function onFocus() {\n        console.log('focus');\n    }\n\n    function onSearch(val) {\n        console.log('search:', val);\n    }\n\n    let species = [{\n        name: 'monstera',\n        id: 1},\n        {\n            name: 'philodendron',\n            id: 2},\n        {\n            name: 'pilea peperomioides\\n',\n            id: 3}]\n\n   const renderSpecies = species.map((data) =>\n       <Option\n           key={data.id}\n           value={data.id}\n       >\n           {data.name}\n       </Option>\n   )\n\n    return(\n        <Select\n            showSearch\n            style={{ width: 200 }}\n            placeholder=\"Select a species\"\n            optionFilterProp=\"children\"\n            onChange={onChange}\n            onFocus={onFocus}\n            onBlur={onBlur}\n            onSearch={onSearch}\n            filterOption={(input, option) =>\n                option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n            }\n        >\n            {renderSpecies}\n        </Select>\n    )}\n\nexport default PlantSelect","import React from 'react'\nimport {Button, Input, Select} from \"antd\";\nimport {LeftOutlined, CheckOutlined} from \"@ant-design/icons\";\nimport PlantSelect from \"./PlantSelect\";\n\n\nconst AddPlant = (props) => {\n    return (\n        <div className='flex flex-column items-center justify-center'>\n            <Button style={{width: '80px'}} icon={<LeftOutlined />}  onClick={props.handlePlantState}> back </Button>\n            <Input style={{minWidth: '100px', width: '50%'}} onChange={(e) => props.setMessage(e.target.value )} placeholder=\"name\" />\n            <PlantSelect {...props}></PlantSelect>\n            <div style={{height:'20px'}}></div>\n            {\n                (props.message && props.age ) ?\n                    <Button style={{width: '80px'}} icon={<CheckOutlined />}  onClick={() => {\n                        props.handleClick(props.message)\n                        props.handlePlantState()\n                    }\n                    }> send </Button>\n                    :\n                    <Button disabled={true} style={{width: '80px'}} icon={<CheckOutlined />}  onClick={() => {\n                        props.handleClick(props.message)\n                        props.handlePlantState()\n                    }\n                    }> send </Button>\n            }\n\n\n        </div>\n    )\n}\n\nexport default AddPlant","import React, {useState} from 'react'\nimport Plus from \"../../../img/Plus\";\nimport '../../../styles/ripple.css'\nimport AddPlant from \"./AddPlant\";\n\n\nconst PlantPlus = (props) => {\n\n    const [hover, setHover] = useState(false)\n    const [wobble, setWobble] = useState(0)\n    const [wobbleReverse, setWobbleReverse] = useState(0)\n    const [addPlantState, setAddPlantState] = useState(false)\n\n    const handleNewPlantClickTime = () => {\n        setWobble(1)\n        setTimeout(() => {\n            setAddPlantState(!addPlantState)\n\n        }, 500)\n    }\n\n    const handleNewPlantClick = () => {\n            setAddPlantState(!addPlantState)\n            setWobble(0)\n            setWobbleReverse(1)\n    }\n\n    const renderStyle = () => {\n        return hover ?\n            {width:'202px', height:'300px', border: '1px solid black', cursor: 'pointer', borderRadius: '25px'}\n            :\n            {width:'202px', height:'300px', borderRadius: '25px'}\n    }\n\n    const renderContent = () => {\n        return addPlantState ?\n            <div  className='flex flex-column items-center justify-center'  style={{width:'202px', height:'300px', border: '1px solid black', borderRadius: '25px', backgroundColor:'#509f58'}}>\n                <div className='flex flex-row items-center justify-center'  style={{height: '80px'}} >\n                    <AddPlant handlePlantState={handleNewPlantClick} {...props} />\n                </div>\n            </div>\n            :\n        <div  wobble={wobble} wobblereverse={wobbleReverse} onAnimationEnd={() =>{\n                setWobble(0)\n                setWobbleReverse(0)}}\n              className=' myDiv myDivReverse flex flex-column items-center justify-center' onMouseEnter={ toggleHover} onMouseLeave={toggleHover} onClick={handleNewPlantClickTime} style={renderStyle()}>\n            <div className='flex flex-row items-center justify-center'  style={{height: '80px'}} >\n                <Plus {...props} />\n            </div>\n        </div>\n\n    }\n\n\n    const toggleHover = () => {\n        setHover(!hover)\n    }\n\n    return (\n        renderContent()\n    )\n\n}\n\nexport default PlantPlus","import React, { useState } from 'react';\nimport {Row, Col, Button, Card, Avatar} from 'antd';\nimport { DeleteOutlined, ProfileOutlined ,  EditOutlined, EllipsisOutlined, SettingOutlined } from '@ant-design/icons';\nimport PlantPlus from \"./AddPlantComponent/PlantPlus\";\nconst { Meta } = Card\n\n\nfunction RenderItems (props) {\n\n\n    const imgLinks = [\n        'https://i.ibb.co/hR0KZxL/Kisspng-swiss-cheese-plant-leaf-tropical-garden-plant-stem-5c7429221e11b9-0010663715511165781232.png',\n        'https://i.ibb.co/W5SF0WC/philo.png',\n        'https://i.ibb.co/YWg53wH/ufoplant.png'\n    ]\n\n\n\n\n    const listItems = props.items.map( (data) =>\n        <Card\n            key={data._id}\n            style={{ width: 200, margin: '0.5%',boxShadow: '2px 2px 10px black' }}\n            cover={\n                <img\n                    alt=\"example\"\n                    src= {imgLinks[ data.id-1]}\n                />\n            }\n            actions={[\n                <ProfileOutlined onClick={() => {props.handlePlantView()}} key=\"ellipsis\" />,\n                <DeleteOutlined onClick={() => {props.deleteItem(data.id)}} key=\"ellipsis\" />,\n            ]}\n        >\n            <Meta\n                title={data.message}\n                description= {data.id}\n            />\n        </Card>\n    )\n\n    return(\n        <div className='flex flex-row items-center justify-center' style={{flexWrap: 'wrap', padding: '2%', width: '100%', height: '100%', backgroundColor: props.colorScheme.fifth}}>\n            {listItems}\n            <PlantPlus {...props} />\n        </div>\n    )\n}\n\n\nexport default RenderItems\n\n\n/*\nstyle={{ margin:'1%', padding: '1%', width: '14%', height: '20%', backgroundColor: 'black'}}\n <div key={data.id}>\n                <p style={{color: 'white'}}> Msg: {data.message} </p>\n                <p style={{color: 'white'}}> id: {data.id} </p>\n                <Button danger type=\"text\" onClick={() => {props.deleteItem(data.id)}}> delete </Button>\n            </div>\n*/\n","import React, {useEffect, useState} from \"react\";\nimport RenderItems from \"./plantComponents/RenderItems\";\nimport axios from \"axios\";\nimport '../styles/BoxShadows.css'\nimport {Button, Divider} from 'antd'\nimport {CheckOutlined, LoadingOutlined } from \"@ant-design/icons\";\n\nlet messages = [];\n\nfunction Items (props) {\n\n    const [items, setItems] = useState([] )\n    const [intervalIsSet, setIntervalIsSet] = useState(false)\n    const [message, setMessage] = useState(null)\n    const [age, setAge] = useState(null)\n\n\n    useEffect(() => {\n        getDataFromDb(props.url, true);\n        if (!intervalIsSet) {\n            let interval = setInterval(() => getDataFromDb(props.url,false), 1000);\n            setIntervalIsSet(interval);\n        }\n        // never let a process live forever\n        // always kill a process everytime we are done using it\n        return function cleanUp() {\n            if (intervalIsSet) {\n                clearInterval(intervalIsSet);\n                setIntervalIsSet(null);\n            }\n        }\n    }, [intervalIsSet, props.url])\n\n//http://localhost:5001/shareyourplant-b5c9a/us-central1/app/api\n\n    //http://localhost:3001/api/getData\n    const getDataFromDb = (url, firstTime) => {\n        fetch(url)\n            .then((data) => data.json())\n            .then((res) => {\n                setItems(res.data)\n                if(firstTime) {setTimeout(() => props.setLoading(false),300)}\n            });\n    };\n\n    const putDataToDB = (message) => {\n        axios.post(`${props.url}/putData`, {\n            id: age,\n            message: message,\n        });\n        setMessage(null)\n        setAge(null)\n    };\n\n\n    const deleteFromDB = (idTodelete) => {\n        parseInt(idTodelete);\n        let objIdToDelete = null;\n        items.forEach((dat) => {\n            if (dat.id == idTodelete) {\n                objIdToDelete = dat._id;\n            }\n        });\n\n        axios({\n            method: 'delete',\n            url: `${props.url}/deleteData`,\n            data: {id: objIdToDelete}\n        });\n    };\n\n\n\n    return (\n        props.loading ?\n            <div className='flex flex-column justify-center items-center' style={{height: '800px', width: '800px'}}>\n                <LoadingOutlined style={{ fontSize: '64px', color: 'grey' }} />\n            </div>\n            :\n            <div className={'card-3'} style={{height: '100%', display: 'flex', flexDirection: 'row'}}>\n                <RenderItems handleClick={putDataToDB} message={message} setMessage={setMessage} age={age} setAge={setAge} items={items} setItems={setItems} deleteItem={deleteFromDB} {...props} />\n            </div>\n    )\n}\n\nexport default Items","import React, {useState} from 'react'\n\nconst HeaderElement = (props) => {\n    const [hover, setHover] = useState(false)\n\n\n    const getBackgroundColor = () => {\n        return hover ?\n            (props.colorScheme.fourth)\n            :\n            (props.colorScheme.fifth)\n    }\n\n    const toggleHover = () => {\n        setHover(!hover)\n    }\n\n    return(\n\n        <div onMouseEnter={ toggleHover} onMouseLeave={toggleHover} key={props.val} className=' flex flex-row justify-center items-center ' style={{cursor: 'pointer' , marginLeft: '10%', marginRight: '10%', height: '100%', width: '100px', backgroundColor: getBackgroundColor(), }}>\n            {props.val}\n        </div>\n\n    )\n\n}\n\nexport default HeaderElement","import React from 'react';\n\nimport Icon from '@ant-design/icons';\n\nconst Fragezeichen = (props) =>\n    <svg color={props.colorScheme.main} width=\"60px\" height=\"60px\" fill=\"currentColor\" viewBox=\"0 0 39 39\">\n        <path  d=\"M17.881,29.927c-2.49,0-4.296,1.896-4.296,4.506c0,2.539,1.825,4.453,4.244,4.453\n\t\t\tc2.521,0,4.349-1.873,4.349-4.453C22.178,31.823,20.371,29.927,17.881,29.927z M17.829,36.466c-1.076,0-1.826-0.836-1.826-2.033\n\t\t\tc0-1.248,0.755-2.088,1.878-2.088c1.175,0,1.878,0.781,1.878,2.088C19.759,35.688,19.02,36.466,17.829,36.466z\"/>\n        <path  d=\"M18.667,0c-2.482,0-5.148,0.627-7.131,1.676c-1.057,0.559-1.539,1.902-1.1,3.059l0.492,1.292\n\t\t\tc0.433,1.139,1.857,1.659,2.979,1.075c1.096-0.573,2.52-0.915,3.799-0.915c2.508,0.04,3.78,1.146,3.78,3.289\n\t\t\tc0,2.019-1.238,3.87-3.381,6.395c-2.675,3.208-3.892,6.646-3.521,9.917l0.051,0.682c0.079,1.023,1.08,1.797,2.33,1.797h1.99\n\t\t\tc0.718,0,1.365-0.256,1.779-0.703c0.322-0.35,0.481-0.797,0.444-1.257l-0.05-0.628c-0.143-2.426,0.665-4.487,2.7-6.896\n\t\t\tc2.711-3.218,4.784-5.989,4.784-9.882C28.613,4.47,25.538,0,18.667,0z M21.981,17.222c-2.435,2.879-3.44,5.53-3.263,8.624h-1.707\n\t\t\tl-0.021-0.285c-0.298-2.635,0.727-5.449,2.962-8.133c2.502-2.943,3.95-5.188,3.95-7.952c0-3.461-2.362-5.648-6.167-5.708h-0.011\n\t\t\tc-1.568,0-3.296,0.395-4.658,1.086l-0.402-1.04c1.653-0.873,3.896-1.394,6.002-1.394c5.55,0,7.527,3.349,7.527,6.482\n\t\t\tC26.193,11.984,24.447,14.295,21.981,17.222z\"/>\n    </svg>\n\nexport default Fragezeichen\n","import React from 'react'\nimport HeaderElement from \"./HeaderElement\";\nimport PlantSvg from \"../img/PlantSvg\";\nimport Plus from \"../img/Plus\";\nimport Fragezeichen from \"../img/Fragezeichen\";\n\nconst MyHeader = (props) => {\n\n    const headerElements = [{\n        data: <PlantSvg {...props}/>,\n        id: 1\n        }, {\n        data: <Plus {...props}/>,\n        id: 2\n    },\n        {data: <Fragezeichen {...props}/>,\n        id: 3\n        }]\n\n\n    const renderHeaderElements =\n        headerElements.map( (e) =>\n        <HeaderElement key={e.id} val = {e.data} {...props} />\n        )\n\n    return(\n        <div className='flex flex-row items-center justify-center' style={{height:'80px', backgroundColor: props.colorScheme.fifth}} >\n            {renderHeaderElements}\n        </div>\n    )\n\n}\n\nexport default MyHeader","import React from 'react'\nimport '../../styles/BoxShadows.css'\nimport {LeftOutlined, ProfileOutlined} from '@ant-design/icons';\nimport {Button} from \"antd\";\n\nconst PlantViewComponent = (props) => {\n\n\n    return (\n        <div className='flex flex-row items-center justify-center' style={{height:'100%', width: '100%', backgroundColor: props.colorScheme.third}}>\n            <div className='card-3 flex flex-column justify-center items-center' style={{height: '700px',width: '500px',  display: 'flex', flexDirection: 'row', backgroundColor: props.colorScheme.fifth}}>\n                <Button className='self-end align-self-start'style={{width: '80px'}} icon={<LeftOutlined />}  onClick={ () => {\n                    props.toggleLoading()\n                    props.handlePlantView()\n                }\n                }> back </Button>\n            </div>\n        </div>\n    )\n}\n\nexport default PlantViewComponent","import React, {useState} from 'react'\nimport {Radio} from \"antd\";\n\n\n\nconst RadioConnection = (props) => {\n    const [disable, setDisable] = useState(false)\n\n\n    return (\n            <Radio.Group disabled={disable} className= 'self-center'  defaultValue=\"b\" size=\"large\">\n                <Radio.Button onClick={ () => {\n                    props.onChange(false)\n                    setDisable(true)\n                    setTimeout(() => setDisable(false),1000)\n                }}\n                              value=\"a\"> firebase </Radio.Button>\n                <Radio.Button onClick={ () => {\n                    props.onChange(true)\n                    setDisable(true)\n                    setTimeout(() => setDisable(false),1000)\n                }}\n                              value=\"b\">localhost</Radio.Button>\n            </Radio.Group>\n    )\n}\n\nexport default RadioConnection\n\n\n\n","import React from 'react'\n\n\nconst MyFooter = (props) => {\n\n    return(\n        <div className='flex flex-row items-center justify-center' style={{height:'80px', backgroundColor: props.colorScheme.fifth}} >\n            <h3> Share your Plant // created by Henk van der Sloot // ©2020 </h3>\n        </div>\n    )\n\n}\n\nexport default MyFooter","import React, {useState, useEffect} from 'react';\n\nimport { Layout, Menu, Checkbox } from 'antd';\nimport Icon from '@ant-design/icons';\nimport 'antd/dist/antd.css';\nimport PlantSvg from \"./img/PlantSvg\";\n\n\n\nimport DbExchange from \"./components/plantComponents/DbExchange\";\nimport RenderItems from \"./components/plantComponents/RenderItems\";\nimport Items from \"./components/Items\";\nimport MyHeader from \"./components/MyHeader\";\nimport PlantViewComponent from \"./components/plantComponents/PlantViewComponent\";\nimport CheckboxConnection from \"./components/CheckboxConnection\";\nimport RadioConnection from \"./components/RadioConnection\";\nimport MyFooter from \"./components/MyFooter\";\n\nconst { Footer, Content } = Layout\n\n\n\nfunction App() {\n\n    const urls = ['https://us-central1-shareyourplant-b5c9a.cloudfunctions.net/app/api', 'http://localhost:5001/shareyourplant-b5c9a/us-central1/app/api' ]\n    const [devMode, setDevMode] = useState(true)\n    const [intervalIsSet, setIntervalIsSet] = useState(null)\n    const [url, setUrl] = useState(urls[1])\n    const [plantView, setPlantView] = useState(false)\n    const [loading, setLoading] = useState(true)\n\n\n\n    const colorScheme = {\n                        main: '#264653',\n                        second: '#2a9d8f',\n                        third: '#e9c46a',\n                        fourth: '#f4a261',\n                        fifth: '#e76f51'\n    }\n\n/*\n    useEffect(() => {\n        if (!intervalIsSet) {\n            let interval = setInterval(() => {\n                console.log(devMode)\n                console.log(url)\n            }, 1000);\n            setIntervalIsSet(interval);\n        }\n        return function cleanUp() {\n            if (intervalIsSet) {\n                clearInterval(intervalIsSet);\n                setIntervalIsSet(null);\n            }\n        }\n    })\n*/\n\n    const toggleLoading = () => {\n        setLoading(!loading);\n    }\n\n    const renderContent = () => {\n        return plantView ?\n            <div style={{  height: '100%',width:'100%', backgroundColor:colorScheme.third }} >\n                <PlantViewComponent colorScheme={colorScheme} toggleLoading={toggleLoading} handlePlantView={handlePlantView} />\n            </div>\n            :\n            <div className='flex flex-column items-center justify-center' style={{  height: '100%',width:'100%', backgroundColor:colorScheme.third }} >\n                <Items colorScheme={colorScheme} loading={loading} setLoading={setLoading} handlePlantView={handlePlantView} url={url}/>\n            </div>\n    }\n\n    const handlePlantView = () => {\n        setPlantView(!plantView);\n    }\n\n    const onChange = (bool) => {\n        setDevMode(bool)\n        setUrl( devMode ?\n            urls[0]\n        :\n            urls[1]\n        )\n         setLoading(true)\n    }\n\n    return (\n        <div >\n            <Layout style={{minHeight: '100vh'}} >\n                <MyHeader colorScheme={colorScheme}/>\n                <Content style={{ height: '100%',}} >\n                    <div className='flex flex-column' style={{ padding: '100px 100px', minHeight: '100vh', backgroundColor: colorScheme.third }}>\n                        <h2 className='self-center'>api connection</h2>\n                        <RadioConnection onChange={onChange} />\n                        {renderContent()}\n                    </div>\n                </Content>\n               <MyFooter colorScheme={colorScheme}/>\n            </Layout>\n        </div>\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}